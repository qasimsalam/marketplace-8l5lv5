name: Backend CI/CD

on:
  push:
    branches: [ main, staging, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend.yml'
  pull_request:
    branches: [ main, staging, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend.yml'

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
        
      - name: Set up Node.js environment
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'
      
      - name: Install Node.js dependencies
        run: |
          cd backend
          npm ci
      
      - name: Run ESLint for TypeScript services
        run: |
          cd backend
          npm run lint
      
      - name: Set up Python environment
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: '**/requirements.txt'
      
      - name: Install Python dependencies
        run: |
          cd backend/ai_service
          pip install -r requirements.txt
          pip install pylint
      
      - name: Run pylint for Python services
        run: |
          cd backend/ai_service
          pylint --disable=C0111,C0103 --max-line-length=120 ./**/*.py

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Check out code
        uses: actions/checkout@v3
        
      - name: Set up Node.js environment
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'
      
      - name: Install Node.js dependencies
        run: |
          cd backend
          npm ci
      
      - name: Run Jest tests for TypeScript services
        run: |
          cd backend
          npm test -- --coverage
      
      - name: Set up Python environment
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: '**/requirements.txt'
      
      - name: Install Python dependencies
        run: |
          cd backend/ai_service
          pip install -r requirements.txt
          pip install pytest pytest-cov
      
      - name: Run pytest for Python services
        run: |
          cd backend/ai_service
          pytest --cov=. --cov-report=xml
      
      - name: Upload test coverage reports
        run: |
          mkdir -p /tmp/coverage-reports
          cp -r backend/coverage /tmp/coverage-reports/
          cp backend/ai_service/coverage.xml /tmp/coverage-reports/
      
      - name: Cache test coverage reports
        uses: actions/cache@v3
        with:
          path: /tmp/coverage-reports
          key: coverage-${{ github.sha }}
          restore-keys: coverage-

  security_scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Check out code
        uses: actions/checkout@v3
        
      - name: Set up Node.js environment
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: Set up Python environment
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Run Snyk dependency scan
        uses: snyk/actions@v0.8.0
        with:
          command: test
          args: --all-projects
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      
      - name: Run security scans
        run: |
          # Install security scanning tools
          npm install -g npm-audit-html
          pip install safety bandit
          
          # Scan Node.js dependencies for vulnerabilities
          cd backend
          npm audit --json > npm-audit.json || true
          npm-audit-html -i npm-audit.json -o npm-audit-report.html
          
          # Scan Python dependencies for vulnerabilities
          cd ai_service
          safety check -r requirements.txt --json > safety-report.json || true
          
          # Run Bandit for Python code
          bandit -r . -f json -o bandit-report.json || true
      
      - name: Upload security reports
        run: |
          mkdir -p /tmp/security-reports
          cp backend/npm-audit-report.html /tmp/security-reports/
          cp backend/ai_service/safety-report.json /tmp/security-reports/
          cp backend/ai_service/bandit-report.json /tmp/security-reports/
      
      - name: Cache security reports
        uses: actions/cache@v3
        with:
          path: /tmp/security-reports
          key: security-reports-${{ github.sha }}
          restore-keys: security-reports-

  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: security_scan
    steps:
      - name: Check out code
        uses: actions/checkout@v3
        
      - name: Login to container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Build and push API Gateway image
        uses: docker/build-push-action@v4
        with:
          context: ./backend/api_gateway
          push: true
          tags: ${{ secrets.DOCKER_REGISTRY }}/api-gateway:${{ github.sha }}
      
      - name: Build and push User Service image
        uses: docker/build-push-action@v4
        with:
          context: ./backend/user_service
          push: true
          tags: ${{ secrets.DOCKER_REGISTRY }}/user-service:${{ github.sha }}
      
      - name: Build and push Job Service image
        uses: docker/build-push-action@v4
        with:
          context: ./backend/job_service
          push: true
          tags: ${{ secrets.DOCKER_REGISTRY }}/job-service:${{ github.sha }}
      
      - name: Build and push Payment Service image
        uses: docker/build-push-action@v4
        with:
          context: ./backend/payment_service
          push: true
          tags: ${{ secrets.DOCKER_REGISTRY }}/payment-service:${{ github.sha }}
      
      - name: Build and push Collaboration Service image
        uses: docker/build-push-action@v4
        with:
          context: ./backend/collaboration_service
          push: true
          tags: ${{ secrets.DOCKER_REGISTRY }}/collaboration-service:${{ github.sha }}
      
      - name: Build and push AI Service image
        uses: docker/build-push-action@v4
        with:
          context: ./backend/ai_service
          push: true
          tags: ${{ secrets.DOCKER_REGISTRY }}/ai-service:${{ github.sha }}

  deploy_dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    steps:
      - name: Check out code
        uses: actions/checkout@v3
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0
      
      - name: Setup kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/v1.27.0/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          kubectl version --client
      
      - name: Update Kubernetes deployment files
        run: |
          cd k8s/dev
          for file in *.yaml; do
            sed -i "s|IMAGE_TAG|${{ github.sha }}|g" $file
          done
      
      - name: Apply Kubernetes configurations
        run: |
          aws eks update-kubeconfig --name ai-talent-dev --region ${{ secrets.AWS_REGION }}
          cd k8s/dev
          kubectl apply -f .
      
      - name: Verify deployment
        run: |
          cd k8s/dev
          kubectl rollout status deployment/api-gateway
          kubectl rollout status deployment/user-service
          kubectl rollout status deployment/job-service
          kubectl rollout status deployment/payment-service
          kubectl rollout status deployment/collaboration-service
          kubectl rollout status deployment/ai-service

  deploy_staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: deploy_dev
    if: github.ref == 'refs/heads/staging'
    steps:
      - name: Check out code
        uses: actions/checkout@v3
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0
      
      - name: Setup kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/v1.27.0/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          kubectl version --client
      
      - name: Update Kubernetes deployment files
        run: |
          cd k8s/staging
          for file in *.yaml; do
            sed -i "s|IMAGE_TAG|${{ github.sha }}|g" $file
          done
      
      - name: Apply Kubernetes configurations
        run: |
          aws eks update-kubeconfig --name ai-talent-staging --region ${{ secrets.AWS_REGION }}
          cd k8s/staging
          kubectl apply -f .
      
      - name: Run integration tests
        run: |
          cd backend/integration-tests
          npm ci
          npm run test:staging
      
      - name: Verify deployment
        run: |
          cd k8s/staging
          kubectl rollout status deployment/api-gateway
          kubectl rollout status deployment/user-service
          kubectl rollout status deployment/job-service
          kubectl rollout status deployment/payment-service
          kubectl rollout status deployment/collaboration-service
          kubectl rollout status deployment/ai-service

  deploy_production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy_staging
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Check out code
        uses: actions/checkout@v3
        
      - name: Require manual approval
        run: |
          echo "Manual approval required for production deployment"
          echo "This is a placeholder for a manual approval step"
          echo "In practice, you would use GitHub Environments with required reviewers"
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0
      
      - name: Setup kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/v1.27.0/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          kubectl version --client
      
      - name: Update Kubernetes deployment files
        run: |
          cd k8s/prod
          for file in *.yaml; do
            sed -i "s|IMAGE_TAG|${{ github.sha }}|g" $file
          done
      
      - name: Apply Kubernetes configurations
        run: |
          aws eks update-kubeconfig --name ai-talent-prod --region ${{ secrets.AWS_REGION }}
          cd k8s/prod
          kubectl apply -f .
      
      - name: Verify deployment
        run: |
          cd k8s/prod
          kubectl rollout status deployment/api-gateway
          kubectl rollout status deployment/user-service
          kubectl rollout status deployment/job-service
          kubectl rollout status deployment/payment-service
          kubectl rollout status deployment/collaboration-service
          kubectl rollout status deployment/ai-service
      
      - name: Run smoke tests
        run: |
          cd backend/integration-tests
          npm ci
          npm run test:smoke