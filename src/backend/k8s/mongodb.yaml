---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mongodb-config
  namespace: ai-talent-marketplace
  labels:
    app: mongodb
    component: database
    tier: data
data:
  mongod.conf: |
    # MongoDB Configuration
    storage:
      dbPath: /data/db
      journal:
        enabled: true
      wiredTiger:
        engineConfig:
          cacheSizeGB: 2

    systemLog:
      destination: file
      path: /data/db/mongodb.log
      logAppend: true
      logRotate: reopen

    net:
      port: 27017
      bindIp: 0.0.0.0

    replication:
      replSetName: rs0

    security:
      authorization: enabled

    setParameter:
      maxIndexBuildMemoryUsageMegabytes: 1000
      cursorTimeoutMillis: 300000
      diagnosticDataCollectionEnabled: true
      slowOpSampleRate: 1
      slowOpThresholdMs: 100
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mongodb-init-scripts
  namespace: ai-talent-marketplace
  labels:
    app: mongodb
    component: database
    tier: data
data:
  01-init-replset.js: |
    rs.initiate();
    sleep(1000);
    db.getSiblingDB('admin').createUser({
      user: 'admin',
      pwd: process.env.MONGO_INITDB_ROOT_PASSWORD,
      roles: [{ role: 'root', db: 'admin' }]
    });
  02-create-databases.js: |
    db = db.getSiblingDB('ai_talent_marketplace');

    // Create collaboration service user
    db.createUser({
      user: 'collaboration_service_user',
      pwd: process.env.COLLABORATION_SERVICE_PASSWORD,
      roles: [{ role: 'readWrite', db: 'ai_talent_marketplace' }]
    });

    // Create collections with schema validation
    db.createCollection('workspaces', {
      validator: {
        $jsonSchema: {
          bsonType: 'object',
          required: ['name', 'contract_id', 'status', 'created_by', 'created_at'],
          properties: {
            name: { bsonType: 'string' },
            description: { bsonType: 'string' },
            contract_id: { bsonType: 'string' },
            job_id: { bsonType: 'string' },
            status: { enum: ['ACTIVE', 'ARCHIVED', 'DELETED'] },
            created_by: { bsonType: 'string' },
            created_at: { bsonType: 'date' },
            updated_at: { bsonType: 'date' }
          }
        }
      }
    });

    db.createCollection('workspace_members', {
      validator: {
        $jsonSchema: {
          bsonType: 'object',
          required: ['workspace_id', 'user_id', 'role', 'last_active_at'],
          properties: {
            workspace_id: { bsonType: 'string' },
            user_id: { bsonType: 'string' },
            role: { enum: ['OWNER', 'EDITOR', 'VIEWER'] },
            permissions: { bsonType: 'object' },
            last_active_at: { bsonType: 'date' }
          }
        }
      }
    });

    db.createCollection('workspace_files', {
      validator: {
        $jsonSchema: {
          bsonType: 'object',
          required: ['workspace_id', 'name', 'file_path', 'created_by', 'created_at'],
          properties: {
            workspace_id: { bsonType: 'string' },
            name: { bsonType: 'string' },
            description: { bsonType: 'string' },
            file_path: { bsonType: 'string' },
            file_type: { bsonType: 'string' },
            size: { bsonType: 'int' },
            mimetype: { bsonType: 'string' },
            created_by: { bsonType: 'string' },
            created_at: { bsonType: 'date' },
            updated_at: { bsonType: 'date' },
            updated_by: { bsonType: 'string' },
            versions: { bsonType: 'array' },
            metadata: { bsonType: 'object' }
          }
        }
      }
    });

    db.createCollection('workspace_activity', {
      validator: {
        $jsonSchema: {
          bsonType: 'object',
          required: ['workspace_id', 'user_id', 'activity_type', 'timestamp'],
          properties: {
            workspace_id: { bsonType: 'string' },
            user_id: { bsonType: 'string' },
            activity_type: { bsonType: 'string' },
            data: { bsonType: 'object' },
            timestamp: { bsonType: 'date' }
          }
        }
      }
    });

    // Create indexes
    db.workspaces.createIndex({ 'contract_id': 1 });
    db.workspaces.createIndex({ 'job_id': 1 });
    db.workspaces.createIndex({ 'created_by': 1 });
    db.workspaces.createIndex({ 'status': 1 });

    db.workspace_members.createIndex({ 'workspace_id': 1, 'user_id': 1 }, { unique: true });
    db.workspace_members.createIndex({ 'user_id': 1 });

    db.workspace_files.createIndex({ 'workspace_id': 1 });
    db.workspace_files.createIndex({ 'created_by': 1 });

    db.workspace_activity.createIndex({ 'workspace_id': 1 });
    db.workspace_activity.createIndex({ 'user_id': 1 });
    db.workspace_activity.createIndex({ 'timestamp': 1 });

    // Create TTL index for activity logs older than 90 days
    db.workspace_activity.createIndex({ 'timestamp': 1 }, { expireAfterSeconds: 7776000 });
---
apiVersion: v1
kind: Secret
metadata:
  name: mongodb-credentials
  namespace: ai-talent-marketplace
  labels:
    app: mongodb
    component: database
    tier: data
type: Opaque
data:
  username: YWRtaW4=  # admin (base64 encoded)
  password: bW9uZ29kYl9wYXNzd29yZA==  # mongodb_password (base64 encoded)
  collaboration-service-password: Y29sbGFib3JhdGlvbl9zZXJ2aWNlX3Bhc3N3b3Jk  # collaboration_service_password (base64 encoded)
---
apiVersion: v1
kind: Service
metadata:
  name: mongodb
  namespace: ai-talent-marketplace
  labels:
    app: mongodb
    component: database
    tier: data
  annotations:
    service.kubernetes.io/description: "MongoDB service for document store"
    prometheus.io/scrape: "true"
    prometheus.io/port: "9216"  # MongoDB exporter port
spec:
  type: ClusterIP
  ports:
    - port: 27017
      targetPort: mongodb
      protocol: TCP
      name: mongodb
  selector:
    app: mongodb
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongodb
  namespace: ai-talent-marketplace
  labels:
    app: mongodb
    component: database
    tier: data
  annotations:
    kubernetes.io/description: "MongoDB document store for AI Talent Marketplace"
spec:
  serviceName: mongodb
  replicas: 3
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: OrderedReady
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
        component: database
        tier: data
    spec:
      securityContext:
        fsGroup: 999  # mongodb group
      initContainers:
        - name: init-permissions
          image: busybox:1.34
          command:
            - sh
            - -c
            - chown -R 999:999 /data/db
          volumeMounts:
            - name: mongodb-data
              mountPath: /data/db
          resources:
            limits:
              cpu: 200m
              memory: 200Mi
            requests:
              cpu: 100m
              memory: 100Mi
      containers:
        - name: mongodb
          image: mongo:6.0  # MongoDB 6.0 container image
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 27017
              name: mongodb
          env:
            - name: MONGO_INITDB_ROOT_USERNAME
              valueFrom:
                secretKeyRef:
                  name: mongodb-credentials
                  key: username
            - name: MONGO_INITDB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mongodb-credentials
                  key: password
            - name: MONGO_INITDB_DATABASE
              value: ai_talent_marketplace
            - name: COLLABORATION_SERVICE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mongodb-credentials
                  key: collaboration-service-password
          resources:
            limits:
              cpu: "2000m"
              memory: "4Gi"
            requests:
              cpu: "1000m"
              memory: "2Gi"
          volumeMounts:
            - name: mongodb-data
              mountPath: /data/db
            - name: mongodb-config
              mountPath: /etc/mongod.conf
              subPath: mongod.conf
            - name: mongodb-init-scripts
              mountPath: /docker-entrypoint-initdb.d
          livenessProbe:
            exec:
              command:
                - mongo
                - --eval
                - "db.adminCommand('ping')"
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            exec:
              command:
                - mongo
                - --eval
                - "db.adminCommand('ping')"
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 2
      volumes:
        - name: mongodb-config
          configMap:
            name: mongodb-config
        - name: mongodb-init-scripts
          configMap:
            name: mongodb-init-scripts
      terminationGracePeriodSeconds: 60
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - mongodb
                topologyKey: kubernetes.io/hostname
  volumeClaimTemplates:
    - metadata:
        name: mongodb-data
      spec:
        accessModes:
          - ReadWriteOnce
        storageClassName: gp3
        resources:
          requests:
            storage: 50Gi
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: mongodb-network-policy
  namespace: ai-talent-marketplace
  labels:
    app: mongodb
    component: database
    tier: data
spec:
  podSelector:
    matchLabels:
      app: mongodb
  policyTypes:
    - Ingress
  ingress:
    - from:
        - podSelector:
            matchLabels:
              app: collaboration-service
        - podSelector:
            matchLabels:
              app: user-service
        - podSelector:
            matchLabels:
              app: job-service
      ports:
        - protocol: TCP
          port: 27017
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: mongodb-pdb
  namespace: ai-talent-marketplace
  labels:
    app: mongodb
    component: database
    tier: data
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: mongodb