---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  namespace: ai-talent-marketplace
data:
  postgresql.conf: |-
    # PostgreSQL Configuration
    max_connections = 100
    shared_buffers = 1GB
    effective_cache_size = 3GB
    work_mem = 16MB
    maintenance_work_mem = 256MB
    random_page_cost = 1.1
    effective_io_concurrency = 200
    wal_buffers = 16MB
    min_wal_size = 1GB
    max_wal_size = 4GB
    checkpoint_completion_target = 0.9
    default_statistics_target = 100
    log_destination = 'stderr'
    logging_collector = on
    log_directory = 'pg_log'
    log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'
    log_truncate_on_rotation = on
    log_rotation_age = 1d
    log_rotation_size = 100MB
    log_min_duration_statement = 1000
    log_checkpoints = on
    log_connections = on
    log_disconnections = on
    log_lock_waits = on
    log_temp_files = 0
    log_autovacuum_min_duration = 0
    log_error_verbosity = default
    log_line_prefix = '%m [%p] %q%u@%d '
    log_statement = 'ddl'
    track_functions = all
    track_activity_query_size = 2048
    track_io_timing = on
    statement_timeout = 60000
    idle_in_transaction_session_timeout = 30000
    ssl = on
    ssl_prefer_server_ciphers = on
    autovacuum = on
    autovacuum_vacuum_scale_factor = 0.05
    autovacuum_analyze_scale_factor = 0.025
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init-scripts
  namespace: ai-talent-marketplace
data:
  01-init-extensions.sql: |-
    -- Enable necessary PostgreSQL extensions
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    CREATE EXTENSION IF NOT EXISTS "pgcrypto";
    CREATE EXTENSION IF NOT EXISTS "pg_stat_statements";
    CREATE EXTENSION IF NOT EXISTS "btree_gin";
    CREATE EXTENSION IF NOT EXISTS "pg_trgm";
  02-create-databases.sql: |-
    -- Create databases for each service
    CREATE DATABASE user_service;
    CREATE DATABASE job_service;
    CREATE DATABASE payment_service;
  03-create-users.sql: |-
    -- Create service-specific database users
    CREATE USER user_service_user WITH ENCRYPTED PASSWORD '${USER_SERVICE_PASSWORD}';
    CREATE USER job_service_user WITH ENCRYPTED PASSWORD '${JOB_SERVICE_PASSWORD}';
    CREATE USER payment_service_user WITH ENCRYPTED PASSWORD '${PAYMENT_SERVICE_PASSWORD}';

    -- Grant privileges
    GRANT ALL PRIVILEGES ON DATABASE user_service TO user_service_user;
    GRANT ALL PRIVILEGES ON DATABASE job_service TO job_service_user;
    GRANT ALL PRIVILEGES ON DATABASE payment_service TO payment_service_user;
---
apiVersion: v1
kind: Secret
metadata:
  name: postgres-credentials
  namespace: ai-talent-marketplace
type: Opaque
data:
  username: cG9zdGdyZXM=  # postgres
  password: cG9zdGdyZXNfcGFzc3dvcmQ=  # postgres_password
  user-service-password: dXNlcl9zZXJ2aWNlX3Bhc3N3b3Jk  # user_service_password
  job-service-password: am9iX3NlcnZpY2VfcGFzc3dvcmQ=  # job_service_password
  payment-service-password: cGF5bWVudF9zZXJ2aWNlX3Bhc3N3b3Jk  # payment_service_password
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: ai-talent-marketplace
  labels:
    app: postgres
    component: database
spec:
  type: ClusterIP
  ports:
    - port: 5432
      targetPort: postgres
      protocol: TCP
      name: postgres
  selector:
    app: postgres
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: ai-talent-marketplace
  labels:
    app: postgres
    component: database
    tier: data
spec:
  serviceName: postgres
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: OrderedReady
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      securityContext:
        fsGroup: 999
      initContainers:
        - name: init-permissions
          image: busybox:1.34
          command:
            - sh
            - -c
            - chown -R 999:999 /var/lib/postgresql/data
          volumeMounts:
            - name: postgres-data
              mountPath: /var/lib/postgresql/data
      containers:
        - name: postgres
          image: postgres:15-alpine  # PostgreSQL v15.x
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 5432
              name: postgres
          env:
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: postgres-credentials
                  key: username
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-credentials
                  key: password
            - name: POSTGRES_DB
              value: ai_talent_marketplace
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
          resources:
            limits:
              cpu: "2000m"
              memory: "4Gi"
            requests:
              cpu: "1000m"
              memory: "2Gi"
          volumeMounts:
            - name: postgres-data
              mountPath: /var/lib/postgresql/data
            - name: postgres-config
              mountPath: /etc/postgresql/postgresql.conf
              subPath: postgresql.conf
            - name: postgres-init-scripts
              mountPath: /docker-entrypoint-initdb.d
          livenessProbe:
            exec:
              command:
                - pg_isready
                - -U
                - postgres
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            exec:
              command:
                - pg_isready
                - -U
                - postgres
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 2
      volumes:
        - name: postgres-config
          configMap:
            name: postgres-config
        - name: postgres-init-scripts
          configMap:
            name: postgres-init-scripts
      terminationGracePeriodSeconds: 60
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - postgres
                topologyKey: kubernetes.io/hostname
  volumeClaimTemplates:
    - metadata:
        name: postgres-data
      spec:
        accessModes:
          - ReadWriteOnce
        storageClassName: gp3
        resources:
          requests:
            storage: 50Gi
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: postgres-network-policy
  namespace: ai-talent-marketplace
spec:
  podSelector:
    matchLabels:
      app: postgres
  policyTypes:
    - Ingress
  ingress:
    - from:
        - podSelector:
            matchLabels:
              app: api-gateway
        - podSelector:
            matchLabels:
              app: user-service
        - podSelector:
            matchLabels:
              app: job-service
        - podSelector:
            matchLabels:
              app: payment-service
      ports:
        - protocol: TCP
          port: 5432
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: postgres-pdb
  namespace: ai-talent-marketplace
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: postgres