version: '3.8'

services:
  api-gateway:
    image: node:18-alpine
    working_dir: /app
    command: ['sh', '-c', 'npm install && npm run dev']
    volumes:
      - ./api-gateway:/app
      - ./shared:/app/shared
    ports:
      - "8000:4000"
    environment:
      - NODE_ENV=development
      - PORT=4000
      - HOST=0.0.0.0
      - LOG_LEVEL=debug
      - CORS_ORIGINS=http://localhost:3000,http://localhost:8000
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRY=15m
      - JWT_ALGORITHM=RS256
      - REDIS_URL=redis://redis:6379/0
      - RATE_LIMIT_WINDOW=60000
      - RATE_LIMIT_MAX_REQUESTS=100
      - USER_SERVICE_URL=http://user-service:4001
      - JOB_SERVICE_URL=http://job-service:8003
      - PAYMENT_SERVICE_URL=http://payment-service:4002
      - COLLABORATION_SERVICE_URL=http://collaboration-service:8005
      - AI_SERVICE_URL=http://ai-service:8004
    depends_on:
      - redis
      - user-service
      - job-service
      - payment-service
      - collaboration-service
      - ai-service
    networks:
      - backend-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  user-service:
    image: node:18-alpine
    working_dir: /app
    command: ['sh', '-c', 'npm install && npm run dev']
    volumes:
      - ./user-service:/app
      - ./shared:/app/shared
    ports:
      - "4001:4001"
    environment:
      - NODE_ENV=development
      - PORT=4001
      - HOST=0.0.0.0
      - LOG_LEVEL=debug
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/ai_talent_marketplace
      - PASSWORD_SALT_ROUNDS=10
      - JWT_SECRET=${JWT_SECRET}
      - EMAIL_VERIFICATION_EXPIRY=24h
      - PASSWORD_RESET_EXPIRY=1h
      - AVATAR_UPLOAD_PATH=./uploads/avatars
      - MAX_AVATAR_SIZE_KB=1024
      - REDIS_URL=redis://redis:6379/1
    depends_on:
      - postgres
      - redis
    networks:
      - backend-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:4001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  payment-service:
    image: node:18-alpine
    working_dir: /app
    command: ['sh', '-c', 'npm install && npm run dev']
    volumes:
      - ./payment-service:/app
      - ./shared:/app/shared
    ports:
      - "4002:4002"
    environment:
      - NODE_ENV=development
      - PORT=4002
      - HOST=0.0.0.0
      - LOG_LEVEL=debug
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/ai_talent_marketplace
      - STRIPE_API_KEY=${STRIPE_API_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - STRIPE_API_VERSION=2022-11-15
      - PLATFORM_FEE_PERCENT=15
      - DEFAULT_CURRENCY=USD
      - ESCROW_RELEASE_DELAY_DAYS=14
      - JWT_SECRET=${JWT_SECRET}
      - REDIS_URL=redis://redis:6379/2
    depends_on:
      - postgres
      - redis
    networks:
      - backend-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:4002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  job-service:
    image: python:3.11-slim
    working_dir: /app
    command: ['sh', '-c', 'pip install poetry && poetry install && poetry run uvicorn src.main:app --host 0.0.0.0 --port 8003 --reload']
    volumes:
      - ./job-service:/app
    ports:
      - "8003:8003"
    environment:
      - JOB_SVC_APP_NAME=job-service
      - JOB_SVC_APP_VERSION=1.0.0
      - JOB_SVC_PORT=8003
      - JOB_SVC_API_PREFIX=/api/v1
      - DEBUG=true
      - LOG_LEVEL=debug
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/ai_talent_marketplace
      - ELASTICSEARCH_HOST=elasticsearch
      - ELASTICSEARCH_PORT=9200
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=${ELASTICSEARCH_PASSWORD}
      - ELASTICSEARCH_JOB_INDEX=jobs
      - ELASTICSEARCH_PROFILE_INDEX=profiles
      - AI_SERVICE_URL=http://ai-service:8004
      - USER_SERVICE_URL=http://user-service:4001
      - DEFAULT_PAGE_SIZE=20
      - MAX_PAGE_SIZE=100
      - JOB_MATCH_THRESHOLD=70
      - MAX_MATCHES=20
      - JWT_SECRET_KEY=${JWT_SECRET}
      - JWT_ALGORITHM=RS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=60
    depends_on:
      - postgres
      - elasticsearch
      - redis
    networks:
      - backend-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  collaboration-service:
    image: python:3.11-slim
    working_dir: /app
    command: ['sh', '-c', 'pip install poetry && poetry install && poetry run uvicorn src.main:app --host 0.0.0.0 --port 8005 --reload']
    volumes:
      - ./collaboration-service:/app
    ports:
      - "8005:8005"
    environment:
      - COLLAB_SVC_APP_NAME=collaboration-service
      - COLLAB_SVC_APP_VERSION=1.0.0
      - COLLAB_SVC_PORT=8005
      - COLLAB_SVC_API_PREFIX=/api/v1
      - DEBUG=true
      - LOG_LEVEL=debug
      - ENVIRONMENT=development
      - MONGODB_URI=mongodb://mongodb:mongodb@mongodb:27017/ai_talent_marketplace?authSource=admin
      - COLLAB_SVC_MONGODB_DB_NAME=ai_talent_collaboration
      - COLLAB_SVC_JUPYTER_NOTEBOOK_DIR=./data/notebooks
      - COLLAB_SVC_FILE_STORAGE_PATH=./data/files
      - COLLAB_SVC_MAX_FILE_SIZE_MB=50
      - COLLAB_SVC_ALLOWED_FILE_TYPES=application/pdf,application/json,text/plain,application/x-ipynb+json,application/x-python
      - COLLAB_SVC_WORKSPACE_INACTIVITY_TIMEOUT=1800
      - JWT_SECRET_KEY=${JWT_SECRET}
      - JWT_ALGORITHM=RS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=60
      - REDIS_URL=redis://redis:6379/3
    depends_on:
      - mongodb
      - redis
    networks:
      - backend-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  ai-service:
    image: python:3.11-slim
    working_dir: /app
    command: ['sh', '-c', 'pip install poetry && poetry install && poetry run uvicorn src.main:app --host 0.0.0.0 --port 8004 --reload']
    volumes:
      - ./ai-service:/app
    ports:
      - "8004:8004"
    environment:
      - AI_SVC_APP_NAME=ai-service
      - AI_SVC_APP_VERSION=1.0.0
      - AI_SVC_PORT=8004
      - AI_SVC_API_PREFIX=/api/v1
      - DEBUG=true
      - LOG_LEVEL=debug
      - ENVIRONMENT=development
      - AI_SVC_OPENAI_API_KEY=${AI_SVC_OPENAI_API_KEY}
      - AI_SVC_OPENAI_MODEL=text-embedding-ada-002
      - AI_SVC_EMBEDDING_DIMENSION=1536
      - ELASTICSEARCH_HOST=elasticsearch
      - ELASTICSEARCH_PORT=9200
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=${ELASTICSEARCH_PASSWORD}
      - AI_SVC_ELASTICSEARCH_INDEX_PREFIX=ai_talent_
      - AI_SVC_RECOMMENDATION_THRESHOLD=0.75
      - AI_SVC_MAX_RECOMMENDATIONS=10
      - JWT_SECRET_KEY=${JWT_SECRET}
      - JWT_ALGORITHM=RS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=60
      - REDIS_URL=redis://redis:6379/4
    depends_on:
      - elasticsearch
      - redis
    networks:
      - backend-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=ai_talent_marketplace
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./db/migrations:/docker-entrypoint-initdb.d/migrations
      - ./db/seeds:/docker-entrypoint-initdb.d/seeds
    networks:
      - backend-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  mongodb:
    image: mongo:6.0
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME:-mongodb}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD:-mongodb}
      - MONGO_INITDB_DATABASE=ai_talent_marketplace
    ports:
      - "27017:27017"
    volumes:
      - mongodb-data:/data/db
    networks:
      - backend-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - backend-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  elasticsearch:
    image: elasticsearch:8.8.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=true
      - ELASTIC_PASSWORD=${ELASTICSEARCH_PASSWORD:-elastic}
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - backend-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -s -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  postgres-data:
    driver: local
  mongodb-data:
    driver: local
  redis-data:
    driver: local
  elasticsearch-data:
    driver: local

networks:
  backend-network:
    driver: bridge